/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if (lists.empty()){
            return nullptr;
        }

        auto comp = [](ListNode* a, ListNode* b){return a->val > b->val;};
        //from less to big
        priority_queue <ListNode *, vector<ListNode*>, decltype(comp)> pq(comp);
        
        for(auto &list: lists){
            if(list != nullptr){
                pq.push(list);
                
            }
        }
        if (pq.empty()){
            return nullptr;
        }

        
        auto ans = pq.top();
        
        auto head = ans;
        pq.pop();
        if (ans->next != nullptr){
            pq.push(ans->next);
        }

        while(!pq.empty()){
            ans->next = pq.top();
            pq.pop();
            auto next = ans->next->next;
            if (next != nullptr){
                pq.push(next);
            } 
            ans = ans->next;
        }

        return head;
    }
};