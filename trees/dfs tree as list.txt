class Solution {
public:
    
    void dfs(vector <vector<int>> list, int node, int arrival,const string &labels)
    {
        // Printing traversed node
        cout << node << " " << labels[node] << '\n';
    
        // Traversing adjacent edges
        for (int i = 0; i < list[node].size(); i++) {
            cout << list[node][i] << " parent " << arrival << endl;
            // Not traversing the parent node
            if (list[node][i] != arrival)
                dfs(list, list[node][i], node, labels);
        }
    }
    
    vector<int> countSubTrees(int n, vector<vector<int>>& edges, string labels) {
        vector <vector<int>> graf(n);
        
        vector<int> result(n, 1);
        
        array<int, 27> lettersArr;
        
        for(auto &edge: edges){
            graf[edge[0]].emplace_back(edge[1]);
            graf[edge[1]].emplace_back(edge[0]);
            
        }
        
       dfs(graf,0,0, labels);
        
        return result;
    }
};